$date
	Wed Oct 23 19:12:17 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module riscv0 $end
$var wire 2 # KEY [1:0] $end
$var wire 11 $ signals [10:0] $end
$var wire 7 % opcode [6:0] $end
$var wire 32 & immGenOut [31:0] $end
$var wire 32 ' imemAddr [31:0] $end
$var wire 32 ( dmemOut [31:0] $end
$var wire 32 ) dataB [31:0] $end
$var wire 32 * dataA [31:0] $end
$var wire 1 + clock $end
$var wire 1 , clear $end
$var wire 1 - branchFromAlu $end
$var wire 32 . aluResult [31:0] $end
$var wire 5 / Rs2 [4:0] $end
$var wire 5 0 Rs1 [4:0] $end
$var wire 5 1 Rd [4:0] $end
$var wire 10 2 LEDR [9:0] $end
$var wire 32 3 I [31:0] $end
$var reg 32 4 aluB [31:0] $end
$var reg 32 5 dataD [31:0] $end
$var reg 32 6 pcIn [31:0] $end
$scope module CU $end
$var wire 7 7 opcode [6:0] $end
$var reg 11 8 signals [10:0] $end
$upscope $end
$scope module alu $end
$var wire 3 9 aluOp [2:0] $end
$var wire 32 : andd [31:0] $end
$var wire 32 ; dataB [31:0] $end
$var wire 4 < func [3:0] $end
$var wire 32 = orr [31:0] $end
$var wire 32 > xorr [31:0] $end
$var wire 32 ? sub [31:0] $end
$var wire 1 @ func7 $end
$var wire 3 A func3 [2:0] $end
$var wire 32 B dataA [31:0] $end
$var wire 32 C add [31:0] $end
$var reg 32 D aluResult [31:0] $end
$var reg 1 - branchFromAlu $end
$upscope $end
$scope module dmem $end
$var wire 8 E ADDR [7:0] $end
$var wire 1 , clear $end
$var wire 1 + clk $end
$var wire 1 F wren $end
$var wire 32 G DOUT [31:0] $end
$var wire 32 H DIN [31:0] $end
$var integer 32 I i [31:0] $end
$upscope $end
$scope module imem $end
$var wire 8 J ADDR [7:0] $end
$var wire 32 K DIN [31:0] $end
$var wire 1 , clear $end
$var wire 1 + clk $end
$var wire 1 L wren $end
$var wire 32 M DOUT [31:0] $end
$var integer 32 N i [31:0] $end
$upscope $end
$scope module immGen $end
$var wire 32 O I [31:0] $end
$var wire 2 P immSel [1:0] $end
$var reg 32 Q imm [31:0] $end
$var integer 32 R i [31:0] $end
$upscope $end
$scope module pc $end
$var wire 1 , clear $end
$var wire 1 S clock $end
$var wire 32 T data [31:0] $end
$var wire 1 U enable $end
$var reg 32 V out [31:0] $end
$upscope $end
$scope module rf $end
$var wire 5 W addrA [4:0] $end
$var wire 5 X addrB [4:0] $end
$var wire 5 Y addrD [4:0] $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 [ dataD [31:0] $end
$var wire 1 \ regWriteEnable $end
$var reg 32 ] Rin [31:0] $end
$var reg 32 ^ dataA [31:0] $end
$var reg 32 _ dataB [31:0] $end
$scope begin r[1] $end
$scope module r $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 ` data [31:0] $end
$var wire 1 a enable $end
$var reg 32 b out [31:0] $end
$upscope $end
$upscope $end
$scope begin r[2] $end
$scope module r $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 c data [31:0] $end
$var wire 1 d enable $end
$var reg 32 e out [31:0] $end
$upscope $end
$upscope $end
$scope begin r[3] $end
$scope module r $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 f data [31:0] $end
$var wire 1 g enable $end
$var reg 32 h out [31:0] $end
$upscope $end
$upscope $end
$scope begin r[4] $end
$scope module r $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 i data [31:0] $end
$var wire 1 j enable $end
$var reg 32 k out [31:0] $end
$upscope $end
$upscope $end
$scope begin r[5] $end
$scope module r $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 l data [31:0] $end
$var wire 1 m enable $end
$var reg 32 n out [31:0] $end
$upscope $end
$upscope $end
$scope begin r[6] $end
$scope module r $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 o data [31:0] $end
$var wire 1 p enable $end
$var reg 32 q out [31:0] $end
$upscope $end
$upscope $end
$scope begin r[7] $end
$scope module r $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 r data [31:0] $end
$var wire 1 s enable $end
$var reg 32 t out [31:0] $end
$upscope $end
$upscope $end
$scope begin r[8] $end
$scope module r $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 u data [31:0] $end
$var wire 1 v enable $end
$var reg 32 w out [31:0] $end
$upscope $end
$upscope $end
$scope begin r[9] $end
$scope module r $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 x data [31:0] $end
$var wire 1 y enable $end
$var reg 32 z out [31:0] $end
$upscope $end
$upscope $end
$scope begin r[10] $end
$scope module r $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 { data [31:0] $end
$var wire 1 | enable $end
$var reg 32 } out [31:0] $end
$upscope $end
$upscope $end
$scope begin r[11] $end
$scope module r $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 ~ data [31:0] $end
$var wire 1 !" enable $end
$var reg 32 "" out [31:0] $end
$upscope $end
$upscope $end
$scope begin r[12] $end
$scope module r $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 #" data [31:0] $end
$var wire 1 $" enable $end
$var reg 32 %" out [31:0] $end
$upscope $end
$upscope $end
$scope begin r[13] $end
$scope module r $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 &" data [31:0] $end
$var wire 1 '" enable $end
$var reg 32 (" out [31:0] $end
$upscope $end
$upscope $end
$scope begin r[14] $end
$scope module r $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 )" data [31:0] $end
$var wire 1 *" enable $end
$var reg 32 +" out [31:0] $end
$upscope $end
$upscope $end
$scope begin r[15] $end
$scope module r $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 ," data [31:0] $end
$var wire 1 -" enable $end
$var reg 32 ." out [31:0] $end
$upscope $end
$upscope $end
$scope begin r[16] $end
$scope module r $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 /" data [31:0] $end
$var wire 1 0" enable $end
$var reg 32 1" out [31:0] $end
$upscope $end
$upscope $end
$scope begin r[17] $end
$scope module r $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 2" data [31:0] $end
$var wire 1 3" enable $end
$var reg 32 4" out [31:0] $end
$upscope $end
$upscope $end
$scope begin r[18] $end
$scope module r $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 5" data [31:0] $end
$var wire 1 6" enable $end
$var reg 32 7" out [31:0] $end
$upscope $end
$upscope $end
$scope begin r[19] $end
$scope module r $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 8" data [31:0] $end
$var wire 1 9" enable $end
$var reg 32 :" out [31:0] $end
$upscope $end
$upscope $end
$scope begin r[20] $end
$scope module r $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 ;" data [31:0] $end
$var wire 1 <" enable $end
$var reg 32 =" out [31:0] $end
$upscope $end
$upscope $end
$scope begin r[21] $end
$scope module r $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 >" data [31:0] $end
$var wire 1 ?" enable $end
$var reg 32 @" out [31:0] $end
$upscope $end
$upscope $end
$scope begin r[22] $end
$scope module r $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 A" data [31:0] $end
$var wire 1 B" enable $end
$var reg 32 C" out [31:0] $end
$upscope $end
$upscope $end
$scope begin r[23] $end
$scope module r $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 D" data [31:0] $end
$var wire 1 E" enable $end
$var reg 32 F" out [31:0] $end
$upscope $end
$upscope $end
$scope begin r[24] $end
$scope module r $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 G" data [31:0] $end
$var wire 1 H" enable $end
$var reg 32 I" out [31:0] $end
$upscope $end
$upscope $end
$scope begin r[25] $end
$scope module r $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 J" data [31:0] $end
$var wire 1 K" enable $end
$var reg 32 L" out [31:0] $end
$upscope $end
$upscope $end
$scope begin r[26] $end
$scope module r $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 M" data [31:0] $end
$var wire 1 N" enable $end
$var reg 32 O" out [31:0] $end
$upscope $end
$upscope $end
$scope begin r[27] $end
$scope module r $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 P" data [31:0] $end
$var wire 1 Q" enable $end
$var reg 32 R" out [31:0] $end
$upscope $end
$upscope $end
$scope begin r[28] $end
$scope module r $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 S" data [31:0] $end
$var wire 1 T" enable $end
$var reg 32 U" out [31:0] $end
$upscope $end
$upscope $end
$scope begin r[29] $end
$scope module r $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 V" data [31:0] $end
$var wire 1 W" enable $end
$var reg 32 X" out [31:0] $end
$upscope $end
$upscope $end
$scope begin r[30] $end
$scope module r $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 Y" data [31:0] $end
$var wire 1 Z" enable $end
$var reg 32 [" out [31:0] $end
$upscope $end
$upscope $end
$scope begin r[31] $end
$scope module r $end
$var wire 1 , clear $end
$var wire 1 Z clock $end
$var wire 32 \" data [31:0] $end
$var wire 1 ]" enable $end
$var reg 32 ^" out [31:0] $end
$upscope $end
$upscope $end
$scope module r0 $end
$var wire 1 _" clear $end
$var wire 1 Z clock $end
$var wire 32 `" data [31:0] $end
$var wire 1 a" enable $end
$var reg 32 b" out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 b"
xa"
bx `"
0_"
bx ^"
x]"
bx \"
bx ["
xZ"
bx Y"
bx X"
xW"
bx V"
bx U"
xT"
bx S"
bx R"
xQ"
bx P"
bx O"
xN"
bx M"
bx L"
xK"
bx J"
bx I"
xH"
bx G"
bx F"
xE"
bx D"
bx C"
xB"
bx A"
bx @"
x?"
bx >"
bx ="
x<"
bx ;"
bx :"
x9"
bx 8"
bx 7"
x6"
bx 5"
bx 4"
x3"
bx 2"
bx 1"
x0"
bx /"
bx ."
x-"
bx ,"
bx +"
x*"
bx )"
bx ("
x'"
bx &"
bx %"
x$"
bx #"
bx ""
x!"
bx ~
bx }
x|
bx {
bx z
xy
bx x
bx w
xv
bx u
bx t
xs
bx r
bx q
xp
bx o
bx n
xm
bx l
bx k
xj
bx i
bx h
xg
bx f
bx e
xd
bx c
bx b
xa
bx `
bx _
bx ^
bx ]
x\
bx [
1Z
bx Y
bx X
bx W
bx V
1U
bx T
1S
b0 R
bx Q
bx P
bx O
b11111111 N
bx M
0L
bz K
bx J
b11111111 I
bx H
bx G
xF
bx E
bx D
bx C
bx B
bx A
x@
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
x-
1,
0+
bx *
bx )
bx (
bx '
bx &
bx %
bx $
b10 #
1"
0!
$end
#1
1a
b0 (
b0 G
b1010 E
b1010 2
b1010 5
b1010 [
b1010 `
b1010 c
b1010 f
b1010 i
b1010 l
b1010 o
b1010 r
b1010 u
b1010 x
b1010 {
b1010 ~
b1010 #"
b1010 &"
b1010 )"
b1010 ,"
b1010 /"
b1010 2"
b1010 5"
b1010 8"
b1010 ;"
b1010 >"
b1010 A"
b1010 D"
b1010 G"
b1010 J"
b1010 M"
b1010 P"
b1010 S"
b1010 V"
b1010 Y"
b1010 \"
b1010 `"
b100000 R
0d
0g
0j
0m
0p
0s
0v
0y
0|
0!"
0$"
0'"
0*"
0-"
00"
03"
06"
09"
0<"
0?"
0B"
0E"
0H"
0K"
0N"
0Q"
0T"
0W"
0Z"
0]"
0a"
b1010 >
b1010 =
b0 :
0-
b1010 .
b1010 D
0F
b10 9
b0 P
1\
b1010 C
b11111111111111111111111111110110 ?
b1010 4
b1010 ;
0@
b0 A
b10 ]
b0 )
b0 H
b0 _
b0 *
b0 B
b0 ^
b1000010100 $
b1000010100 8
b1010 /
b1010 X
b0 <
b0 0
b0 W
b1 1
b1 Y
b10011 %
b10011 7
b1010 &
b1010 Q
b101000000000000010010011 3
b101000000000000010010011 M
b101000000000000010010011 O
b0 J
b100 6
b100 T
b0 '
b0 V
b0 ^"
b0 ["
b0 X"
b0 U"
b0 R"
b0 O"
b0 L"
b0 I"
b0 F"
b0 C"
b0 @"
b0 ="
b0 :"
b0 7"
b0 4"
b0 1"
b0 ."
b0 +"
b0 ("
b0 %"
b0 ""
b0 }
b0 z
b0 w
b0 t
b0 q
b0 n
b0 k
b0 h
b0 e
b0 b
0,
b0 #
0"
#2
1,
b10 #
1"
#4
0Z
0S
1+
b11 #
1!
#5
b10100 E
b10100 2
b10100 5
b10100 [
b10100 `
b10100 c
b10100 f
b10100 i
b10100 l
b10100 o
b10100 r
b10100 u
b10100 x
b10100 {
b10100 ~
b10100 #"
b10100 &"
b10100 )"
b10100 ,"
b10100 /"
b10100 2"
b10100 5"
b10100 8"
b10100 ;"
b10100 >"
b10100 A"
b10100 D"
b10100 G"
b10100 J"
b10100 M"
b10100 P"
b10100 S"
b10100 V"
b10100 Y"
b10100 \"
b10100 `"
0a
1d
b10100 =
b10100 >
b10100 .
b10100 D
b100 ]
b10100 C
b11111111111111111111111111101100 ?
b10100 4
b10100 ;
b10100 /
b10100 X
b10 1
b10 Y
b100000 R
b10100 &
b10100 Q
b1010000000000000100010011 3
b1010000000000000100010011 M
b1010000000000000100010011 O
b100 J
b1000 6
b1000 T
b1010 b
b100 '
b100 V
1Z
1S
0+
b10 #
0!
#6
0Z
0S
1+
b11 #
1!
#7
b0 E
b0 2
0d
0a"
1F
b0 9
b1 P
0\
b0 5
b0 [
b0 `
b0 c
b0 f
b0 i
b0 l
b0 o
b0 r
b0 u
b0 x
b0 {
b0 ~
b0 #"
b0 &"
b0 )"
b0 ,"
b0 /"
b0 2"
b0 5"
b0 8"
b0 ;"
b0 >"
b0 A"
b0 D"
b0 G"
b0 J"
b0 M"
b0 P"
b0 S"
b0 V"
b0 Y"
b0 \"
b0 `"
b0 =
b0 >
b0 .
b0 D
b10 A
b0 ]
b1010 )
b1010 H
b1010 _
b1000101 $
b1000101 8
b0 C
b0 ?
b0 4
b0 ;
b1 /
b1 X
b10 <
b0 1
b0 Y
b100011 %
b100011 7
b100000 R
b0 &
b0 Q
b100000010000000100011 3
b100000010000000100011 M
b100000010000000100011 O
b1000 J
b1100 6
b1100 T
b10100 e
b1000 '
b1000 V
1Z
1S
0+
b10 #
0!
#8
b1010 (
b1010 G
0Z
0S
1+
b11 #
1!
#9
b0 (
b0 G
b100 E
b100 2
b100 5
b100 [
b100 `
b100 c
b100 f
b100 i
b100 l
b100 o
b100 r
b100 u
b100 x
b100 {
b100 ~
b100 #"
b100 &"
b100 )"
b100 ,"
b100 /"
b100 2"
b100 5"
b100 8"
b100 ;"
b100 >"
b100 A"
b100 D"
b100 G"
b100 J"
b100 M"
b100 P"
b100 S"
b100 V"
b100 Y"
b100 \"
b100 `"
b100 =
b100 >
b100 .
b100 D
b10100 )
b10100 H
b10100 _
b100 C
b11111111111111111111111111111100 ?
b100 4
b100 ;
b10 /
b10 X
b100 1
b100 Y
b100000 R
b100 &
b100 Q
b1000000010001000100011 3
b1000000010001000100011 M
b1000000010001000100011 O
b1100 J
b10000 6
b10000 T
b1100 '
b1100 V
1Z
1S
0+
b10 #
0!
#10
b10100 (
b10100 G
0Z
0S
1+
b11 #
1!
#11
1g
b1000 ]
b1010 (
b1010 G
b0 E
b0 2
0F
b0 P
1\
b1010 5
b1010 [
b1010 `
b1010 c
b1010 f
b1010 i
b1010 l
b1010 o
b1010 r
b1010 u
b1010 x
b1010 {
b1010 ~
b1010 #"
b1010 &"
b1010 )"
b1010 ,"
b1010 /"
b1010 2"
b1010 5"
b1010 8"
b1010 ;"
b1010 >"
b1010 A"
b1010 D"
b1010 G"
b1010 J"
b1010 M"
b1010 P"
b1010 S"
b1010 V"
b1010 Y"
b1010 \"
b1010 `"
b0 =
b0 >
b0 .
b0 D
b0 )
b0 H
b0 _
b111100 $
b111100 8
b0 C
b0 ?
b0 4
b0 ;
b0 /
b0 X
b11 1
b11 Y
b11 %
b11 7
b100000 R
b0 &
b0 Q
b10000110000011 3
b10000110000011 M
b10000110000011 O
b10000 J
b10100 6
b10100 T
b10000 '
b10000 V
1Z
1S
0+
b10 #
0!
#12
0Z
0S
1+
b11 #
1!
#13
b10100 5
b10100 [
b10100 `
b10100 c
b10100 f
b10100 i
b10100 l
b10100 o
b10100 r
b10100 u
b10100 x
b10100 {
b10100 ~
b10100 #"
b10100 &"
b10100 )"
b10100 ,"
b10100 /"
b10100 2"
b10100 5"
b10100 8"
b10100 ;"
b10100 >"
b10100 A"
b10100 D"
b10100 G"
b10100 J"
b10100 M"
b10100 P"
b10100 S"
b10100 V"
b10100 Y"
b10100 \"
b10100 `"
b10100 (
b10100 G
b100 E
b100 2
0g
1j
b100 =
b100 >
b100 .
b100 D
b10000 ]
b100 C
b11111111111111111111111111111100 ?
b100 4
b100 ;
b100 /
b100 X
b100 1
b100 Y
b100000 R
b100 &
b100 Q
b10000000010001000000011 3
b10000000010001000000011 M
b10000000010001000000011 O
b10100 J
b11000 6
b11000 T
b1010 h
b10100 '
b10100 V
1Z
1S
0+
b10 #
0!
#14
0Z
0S
1+
b11 #
1!
#15
b0 (
b0 G
b11110 E
b11110 2
0j
1m
b11110 >
b11110 =
b11110 .
b11110 D
b10 9
b10100 4
b10100 ;
b11110 5
b11110 [
b11110 `
b11110 c
b11110 f
b11110 i
b11110 l
b11110 o
b11110 r
b11110 u
b11110 x
b11110 {
b11110 ~
b11110 #"
b11110 &"
b11110 )"
b11110 ,"
b11110 /"
b11110 2"
b11110 5"
b11110 8"
b11110 ;"
b11110 >"
b11110 A"
b11110 D"
b11110 G"
b11110 J"
b11110 M"
b11110 P"
b11110 S"
b11110 V"
b11110 Y"
b11110 \"
b11110 `"
b0 A
b100000 ]
b11111111111111111111111111110110 ?
b11110 C
b1010 *
b1010 B
b1010 ^
b1000010000 $
b1000010000 8
b0 <
b11 0
b11 W
b101 1
b101 Y
b110011 %
b110011 7
b100000 R
b10100 )
b10100 H
b10100 _
b10000011000001010110011 3
b10000011000001010110011 M
b10000011000001010110011 O
b11000 J
b11100 6
b11100 T
b10100 k
b11000 '
b11000 V
1Z
1S
0+
b10 #
0!
#16
0Z
0S
1+
b11 #
1!
#17
b11100 J
b100000 6
b100000 T
b11110 n
b11100 '
b11100 V
1Z
1S
0+
b10 #
0!
#18
0Z
0S
1+
b11 #
1!
#19
b1010 (
b1010 G
b0 E
b0 2
b0 5
b0 [
b0 `
b0 c
b0 f
b0 i
b0 l
b0 o
b0 r
b0 u
b0 x
b0 {
b0 ~
b0 #"
b0 &"
b0 )"
b0 ,"
b0 /"
b0 2"
b0 5"
b0 8"
b0 ;"
b0 >"
b0 A"
b0 D"
b0 G"
b0 J"
b0 M"
b0 P"
b0 S"
b0 V"
b0 Y"
b0 \"
b0 `"
0m
0a"
b0 >
b0 =
1-
b0 .
b0 D
b0 9
0\
b0 4
b0 ;
b0 ]
b0 )
b0 H
b0 _
b0 ?
b0 C
b0 *
b0 B
b0 ^
b0 $
b0 8
b0 /
b0 X
b0 0
b0 W
b0 1
b0 Y
b0 %
b0 7
b100000 R
b0 &
b0 Q
b0 3
b0 M
b0 O
b100000 J
b100100 6
b100100 T
b100000 '
b100000 V
1Z
1S
0+
b10 #
0!
#20
0Z
0S
1+
b11 #
1!
#21
b100100 J
b101000 6
b101000 T
b100100 '
b100100 V
1Z
1S
0+
b10 #
0!
#22
0Z
0S
1+
b11 #
1!
#23
b101000 J
b101100 6
b101100 T
b101000 '
b101000 V
1Z
1S
0+
b10 #
0!
#24
0Z
0S
1+
b11 #
1!
#25
b101100 J
b110000 6
b110000 T
b101100 '
b101100 V
1Z
1S
0+
b10 #
0!
#26
0Z
0S
1+
b11 #
1!
#27
b110000 J
b110100 6
b110100 T
b110000 '
b110000 V
1Z
1S
0+
b10 #
0!
#28
0Z
0S
1+
b11 #
1!
#29
b110100 J
b111000 6
b111000 T
b110100 '
b110100 V
1Z
1S
0+
b10 #
0!
