--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone II" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 13.0 cbx_cycloneii 2013:06:12:18:03:43:SJ cbx_lpm_add_sub 2013:06:12:18:03:43:SJ cbx_lpm_compare 2013:06:12:18:03:43:SJ cbx_lpm_decode 2013:06:12:18:03:43:SJ cbx_mgl 2013:06:12:18:05:10:SJ cbx_stratix 2013:06:12:18:03:43:SJ cbx_stratixii 2013:06:12:18:03:43:SJ  VERSION_END


-- Copyright (C) 1991-2013 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_ppa
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode2087w[1..0]	: WIRE;
	w_anode2096w[3..0]	: WIRE;
	w_anode2113w[3..0]	: WIRE;
	w_anode2123w[3..0]	: WIRE;
	w_anode2133w[3..0]	: WIRE;
	w_anode2143w[3..0]	: WIRE;
	w_anode2153w[3..0]	: WIRE;
	w_anode2163w[3..0]	: WIRE;
	w_anode2173w[3..0]	: WIRE;
	w_anode2185w[1..0]	: WIRE;
	w_anode2192w[3..0]	: WIRE;
	w_anode2203w[3..0]	: WIRE;
	w_anode2213w[3..0]	: WIRE;
	w_anode2223w[3..0]	: WIRE;
	w_anode2233w[3..0]	: WIRE;
	w_anode2243w[3..0]	: WIRE;
	w_anode2253w[3..0]	: WIRE;
	w_anode2263w[3..0]	: WIRE;
	w_data2085w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode2263w[3..3], w_anode2253w[3..3], w_anode2243w[3..3], w_anode2233w[3..3], w_anode2223w[3..3], w_anode2213w[3..3], w_anode2203w[3..3], w_anode2192w[3..3]), ( w_anode2173w[3..3], w_anode2163w[3..3], w_anode2153w[3..3], w_anode2143w[3..3], w_anode2133w[3..3], w_anode2123w[3..3], w_anode2113w[3..3], w_anode2096w[3..3]));
	w_anode2087w[] = ( (w_anode2087w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode2096w[] = ( (w_anode2096w[2..2] & (! w_data2085w[2..2])), (w_anode2096w[1..1] & (! w_data2085w[1..1])), (w_anode2096w[0..0] & (! w_data2085w[0..0])), w_anode2087w[1..1]);
	w_anode2113w[] = ( (w_anode2113w[2..2] & (! w_data2085w[2..2])), (w_anode2113w[1..1] & (! w_data2085w[1..1])), (w_anode2113w[0..0] & w_data2085w[0..0]), w_anode2087w[1..1]);
	w_anode2123w[] = ( (w_anode2123w[2..2] & (! w_data2085w[2..2])), (w_anode2123w[1..1] & w_data2085w[1..1]), (w_anode2123w[0..0] & (! w_data2085w[0..0])), w_anode2087w[1..1]);
	w_anode2133w[] = ( (w_anode2133w[2..2] & (! w_data2085w[2..2])), (w_anode2133w[1..1] & w_data2085w[1..1]), (w_anode2133w[0..0] & w_data2085w[0..0]), w_anode2087w[1..1]);
	w_anode2143w[] = ( (w_anode2143w[2..2] & w_data2085w[2..2]), (w_anode2143w[1..1] & (! w_data2085w[1..1])), (w_anode2143w[0..0] & (! w_data2085w[0..0])), w_anode2087w[1..1]);
	w_anode2153w[] = ( (w_anode2153w[2..2] & w_data2085w[2..2]), (w_anode2153w[1..1] & (! w_data2085w[1..1])), (w_anode2153w[0..0] & w_data2085w[0..0]), w_anode2087w[1..1]);
	w_anode2163w[] = ( (w_anode2163w[2..2] & w_data2085w[2..2]), (w_anode2163w[1..1] & w_data2085w[1..1]), (w_anode2163w[0..0] & (! w_data2085w[0..0])), w_anode2087w[1..1]);
	w_anode2173w[] = ( (w_anode2173w[2..2] & w_data2085w[2..2]), (w_anode2173w[1..1] & w_data2085w[1..1]), (w_anode2173w[0..0] & w_data2085w[0..0]), w_anode2087w[1..1]);
	w_anode2185w[] = ( (w_anode2185w[0..0] & data_wire[3..3]), enable_wire);
	w_anode2192w[] = ( (w_anode2192w[2..2] & (! w_data2085w[2..2])), (w_anode2192w[1..1] & (! w_data2085w[1..1])), (w_anode2192w[0..0] & (! w_data2085w[0..0])), w_anode2185w[1..1]);
	w_anode2203w[] = ( (w_anode2203w[2..2] & (! w_data2085w[2..2])), (w_anode2203w[1..1] & (! w_data2085w[1..1])), (w_anode2203w[0..0] & w_data2085w[0..0]), w_anode2185w[1..1]);
	w_anode2213w[] = ( (w_anode2213w[2..2] & (! w_data2085w[2..2])), (w_anode2213w[1..1] & w_data2085w[1..1]), (w_anode2213w[0..0] & (! w_data2085w[0..0])), w_anode2185w[1..1]);
	w_anode2223w[] = ( (w_anode2223w[2..2] & (! w_data2085w[2..2])), (w_anode2223w[1..1] & w_data2085w[1..1]), (w_anode2223w[0..0] & w_data2085w[0..0]), w_anode2185w[1..1]);
	w_anode2233w[] = ( (w_anode2233w[2..2] & w_data2085w[2..2]), (w_anode2233w[1..1] & (! w_data2085w[1..1])), (w_anode2233w[0..0] & (! w_data2085w[0..0])), w_anode2185w[1..1]);
	w_anode2243w[] = ( (w_anode2243w[2..2] & w_data2085w[2..2]), (w_anode2243w[1..1] & (! w_data2085w[1..1])), (w_anode2243w[0..0] & w_data2085w[0..0]), w_anode2185w[1..1]);
	w_anode2253w[] = ( (w_anode2253w[2..2] & w_data2085w[2..2]), (w_anode2253w[1..1] & w_data2085w[1..1]), (w_anode2253w[0..0] & (! w_data2085w[0..0])), w_anode2185w[1..1]);
	w_anode2263w[] = ( (w_anode2263w[2..2] & w_data2085w[2..2]), (w_anode2263w[1..1] & w_data2085w[1..1]), (w_anode2263w[0..0] & w_data2085w[0..0]), w_anode2185w[1..1]);
	w_data2085w[2..0] = data_wire[2..0];
END;
--VALID FILE
